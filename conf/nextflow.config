/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NeonDisco Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options separated into run profiles
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
// Load base.config by default for all pipelines
includeConfig 'base.config'

profiles {

    // ========== EXECUTOR PROFILES ==========
    'local' {
        workDir = "work-dir"
        executor.memory = '200 GB'
        dag.overwrite = true
        report.overwrite = true
        timeline.overwrite = true
        docker.enabled = true

        process {
            executor = 'local'
            withLabel: 'trimReads' {
                containerOptions = "--rm --name TRIM-READS"
            }
            withLabel: 'alignReads2Pass' {
                containerOptions = "--rm --name ALIGNMENT-2P"
            }
            withLabel: 'alignReadsGeneral' {
                containerOptions = "--rm --name ALIGNMENT-STARGENERAL"
            }
            withLabel: 'alignReadsArriba' {
                containerOptions = "--rm --name ALIGNMENT-ARRIBA"
            }
            withLabel: 'convertFilteredReads' {
                containerOptions = "--rm --name FILTERED-BAM-2-FASTQ"
            }
            withLabel: 'fixmatesMarkdupes' {
                containerOptions = "--rm --name BAM-POSTPROC"
            }
            withLabel: 'aggregateCustomPons' {
                containerOptions = "--rm --name AGGREGATE-PONS"
            }
            withLabel: 'collateCustomPons' {
                containerOptions = "--rm --name COLLATE-FUSION-PONS"
            }
            withLabel: 'collateFusions' {
                containerOptions = "--rm --name COLLATE-FUSIONS"
            }
            withLabel: 'wrangleRawFusions' {
                containerOptions = "--rm --name WRANGLE-RAW-FUSIONS"
            }
            withLabel: 'collectCohortUnfilteredFusions' {
                containerOptions = "--rm --name COLLECT-COHORTWIDE-UNFILTERED-FUSIONS"
            }
            withLabel: 'collateHLAFiles' {
                containerOptions = "--rm --name COLLATE-HLA-FILES"
            }
            withLabel: 'filterReads' {
                containerOptions = "--rm --name ALIGNED-READS-FILTERING"
            }
            withLabel: 'filterFusions' {
                containerOptions = "--rm --name FILTER-FUSIONS"
            }
            withLabel: 'filterHLAByFreq' {
                containerOptions = "--rm --name FILTER_HLAS_BY_FREQ"
            }
            withLabel: 'getRecurrentFusions' {
                containerOptions = "--rm --name FILTER-FOR-RECURRENT"
            }
            withLabel: 'collectNormFilteredFusions' {
                containerOptions = "--rm --name CONCAT_FUSIONS"
            }
            withLabel: 'getCohortRecurrentFusions' {
                containerOptions = "--rm --name IDENTIFY_RECURRENT_FUSIONS"
            }
            withLabel: 'keepValidatedFusions' {
                containerOptions = "--rm --name KEEP-VALIDATED-FUSIONS"
            }
            withLabel: 'typeHLAs' {
                containerOptions = "--rm --name TYPE-HLAS"
            }
            withLabel: 'reformatHLAs' {
                containerOptions = "--rm --name REFORMAT-HLAS"
            }
            withLabel: 'callFusionsAR' {
                containerOptions = "--rm --name FT-CALLING-ARRIBA"
            }
            withLabel: 'callFusionsFC' {
                containerOptions = "--rm --name FT-CALLING-FUSIONCATCHER"
            }
            withLabel: 'callFusionsSF' {
                containerOptions = "--rm --name FT-CALLING-STARFUSION"
            }
            withLabel: 'translateInSilico' {
                containerOptions = "--rm --name TRANSLATE-IN-SILICO"
            }
            withLabel: 'validateInSilico' {
                containerOptions = "--rm --name FUSION-INSPECTOR-VALIDATION"
            }
            withLabel: 'collectCohortValidatedFusions' {
                containerOptions = "--rm --name COLLECT-COHORTWIDE-VALIDATED-FUSIONS"
            }
            withLabel: 'predictCohortNeopeptides' {
                containerOptions = "--rm --name PREDICT-NEOPEPTIDES-COHORT-LEVEL"
            }
            withLabel: 'predictSampleNeopeptides' {
                containerOptions = "--rm --name PREDICT-NEOPEPTIDES-SAMPLE-LEVEL"
            }
        }
    }

    'awsbatch' {
        workDir = 's3://crmy-aws-batch-nf/' // PLEASE CHANGE THIS TO YOUR OWN BUCKET or override in command line with --workDir
        dag.overwrite = true
        report.overwrite = true
        timeline.overwrite = true
        trace.overwrite = true

        aws.region = 'ap-southeast-5'
        aws.batch.cliPath = '/opt/conda/bin/aws' // Path to AWS CLI in all Docker containers
        aws.client.maxConnections = 100

        process {
            executor = 'awsbatch'
            queue = 'aws-batch-nextflow-spot-Q'
            
            // ========== SMART RETRY STRATEGY ==========
            // Only increase memory on OOM, not on spot interruptions
            errorStrategy = { 
                if (task.exitStatus in [137, 139, 140]) {
                    log.warn "OOM detected for ${task.name} (attempt ${task.attempt + 1})"
                    return task.attempt <= 3 ? 'retry' : 'finish'
                }
                else if (task.exitStatus in [143, 104]) {
                    log.warn "Spot interruption for ${task.name} (attempt ${task.attempt + 1})"
                    return task.attempt <= 3 ? 'retry' : 'finish'
                }
                else {
                    return 'finish'
                }
            }
            maxRetries = 3

            // ========== PREPROCESSING AND ALIGNMENT ==========
            
            withLabel: 'trimReads' {
                container = "job-definition://trim-reads-preproc-nf"
            }
            
            withLabel: 'alignReads2Pass' {
                container = "job-definition://align-reads-twopass-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 48.GB + (16.GB * (task.attempt - 1)) : 48.GB }
            }
            
            withLabel: 'alignReadsGeneral' {
                container = "job-definition://align-reads-star-general-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 48.GB + (16.GB * (task.attempt - 1)) : 48.GB }
            }
            
            withLabel: 'alignReadsArriba' {
                container = "job-definition://align-reads-star-arriba-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 48.GB + (16.GB * (task.attempt - 1)) : 48.GB }
            }
            
            withLabel: 'fixmatesMarkdupes' {
                container = "job-definition://fix-mates-mark-dupes-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 16.GB + (8.GB * (task.attempt - 1)) : 16.GB }
            }

            // ========== HLA TYPING ==========
            
            withLabel: 'typeHLAs' {
                container = "job-definition://type-hlas-with-fallback-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 16.GB + (8.GB * (task.attempt - 1)) : 16.GB }
            }
            
            withLabel: 'reformatCollateHLAs' {
                container = "job-definition://reformat-and-collate-hlas-nf"
            }
            
            withLabel: 'filterHLAByFreq' {
                container = "job-definition://filter-hlas-by-freq-nf"
            }

            // ========== FUSION CALLING ==========
            
            withLabel: 'filterReads' {
                container = "job-definition://filter-aligned-reads-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 2.GB + (4.GB * (task.attempt - 1)) : 2.GB }
            }
            
            withLabel: 'convertFilteredReads' {
                container = "job-definition://convert-filt-aligned-reads-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 2.GB + (4.GB * (task.attempt - 1)) : 2.GB }
            }
            
            withLabel: 'callFusionsAR' {
                container = "job-definition://call-fusion-arriba-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 16.GB + (16.GB * (task.attempt - 1)) : 16.GB }
            }
            
            withLabel: 'callFusionsFC' {
                container = "job-definition://call-fusion-fusioncatcher-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 16.GB + (16.GB * (task.attempt - 1)) : 16.GB }
            }
            
            withLabel: 'callFusionsSF' {
                container = "job-definition://call-fusion-starfusion-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 32.GB + (16.GB * (task.attempt - 1)) : 32.GB }
            }
            
            withLabel: 'collateFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                memory = 4.GB
            }
            
            withLabel: 'wrangleRawFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                memory = 4.GB
            }
            
            withLabel: 'collectCohortUnfilteredFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'filterFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                memory = 4.GB
            }
            
            withLabel: 'collectNormFilteredFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'translateInSilico' {
                container = "job-definition://translate-in-silico-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 8.GB + (8.GB * (task.attempt - 1)) : 8.GB }
            }
            
            withLabel: 'collectProteinCodingFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'validateInSilico' {
                container = "job-definition://validate-in-silico-fusions-nf"
                memory = { task.exitStatus in [137, 139, 140] ? 48.GB + (16.GB * (task.attempt - 1)) : 48.GB }
            }
            
            withLabel: 'keepValidatedFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'collectCohortValidatedFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }

            // ========== RECURRENCE FUSION ANALYSIS ==========
            
            withLabel: 'getSampleRecurrentFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'getCohortRecurrentFusionsFiValidated' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }

            // ========== NEOPEPTIDE PREDICTION ==========
            
            withLabel: 'predictCohortNeopeptides' {
                container = "job-definition://predict-neopeptides-nf"
            }
            
            withLabel: 'predictSampleNeopeptides' {
                container = "job-definition://predict-neopeptides-nf"
            }
            
            withLabel: 'collectCohortFusionNeopeptidesSampHla' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'collectCohortFusionNeopeptidesCohoHla' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }

            // ========== CUSTOM PON PROCESSING ==========
            
            withLabel: 'aggregateCustomPons' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
            
            withLabel: 'collateCustomPons' {
                container = "job-definition://general-postprocessing-fusions-nf"
            }
        }     
    }

    // ========== MODE PROFILES ==========
    
    'sampleHLANeoPredMode' {
        params {
            sampleHLANeoPred = true
            sharedHLANeoPred = false
            recurrentFusionsNeoPredOnly = false
        }
    }

    'sharedHLANeoPredMode' {
        params {
            sampleHLANeoPred = false
            sharedHLANeoPred = true
            recurrentFusionsNeoPredOnly = true
        }
    }
    
    'dualNeoPredMode' {
        params {
            sampleHLANeoPred = true
            sharedHLANeoPred = true
            recurrentFusionsNeoPredOnly = false  // Process all validated fusions for comprehensive analysis
        }
    }
}
