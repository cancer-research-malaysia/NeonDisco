/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NeonDisco Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options separated into run profiles
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

// Load base.config by default for all pipelines
includeConfig 'base.config'

profiles {

    // ========== EXECUTOR PROFILES ==========
    'local' {
        workDir = "work-dir"
        executor.memory = '200 GB'
        dag.overwrite = true
        report.overwrite = true
        timeline.overwrite = true
        docker.enabled = true

        params {
            // Default tool-related db and lib dependency files for local runs
            starIndex = "${projectDir}/refs/star-db/GRCh38viral_ENSEMBL113/STAR_index_GRCh38viral_ENSEMBL113"
            arribaDB = "${projectDir}/refs/star-db/GRCh38viral_ENSEMBL113"  
            fuscatDB = "${projectDir}/refs/fuscat-db/hs_ensembl_v113"
            ctatDB = "${projectDir}/refs/ctat-db/ctat_genome_lib_build_dir"
            // "${System.env.HOME}/refs/ctat-db/ctat_genome_lib_build_dir"
        }

        process {
            executor = 'local'
            withLabel: 'trimReads' {
                containerOptions = "--rm --name TRIM-READS"
                //"--rm --env \"MHF_HOST_UID=\$(id -u)\" --env \"MHF_HOST_GID=\$(id -g)\" --name TRIM-READS -v \$(pwd):/home/app/nf_work -v ${params.binDir}:/home/app/scripts"
            }
            withLabel: 'alignReads2Pass' {
                containerOptions = "--rm --name ALIGNMENT-2P -v ${params.starIndex}:/tmp/starIdx"
                //"--rm --env \"MHF_HOST_UID=\$(id -u)\" --env \"MHF_HOST_GID=\$(id -g)\" --name ALIGNMENT-2P"
            }
            withLabel: 'alignReadsGeneral' {
                containerOptions = "--rm --name ALIGNMENT-STARGENERAL -v ${params.starIndex}:/tmp/starIdx"
                //"--rm --env \"MHF_HOST_UID=\$(id -u)\" --env \"MHF_HOST_GID=\$(id -g)\" --name ALIGNMENT-STARGENERAL"
            }
            withLabel: 'alignReadsArriba' {
                containerOptions = "--rm --name ALIGNMENT-ARRIBA -v ${params.starIndex}:/tmp/starIdx"
                //"--rm --env \"MHF_HOST_UID=\$(id -u)\" --env \"MHF_HOST_GID=\$(id -g)\" --name ALIGNMENT-ARRIBA"
            }
            withLabel: 'convertFilteredReads' {
                containerOptions = "--rm --name FILTERED-BAM-2-FASTQ"
                //"--rm --env \"MHF_HOST_UID=\$(id -u)\" --env \"MHF_HOST_GID=\$(id -g)\" --name FILTERED-BAM-2-FASTQ"
            }
            withLabel: 'fixmatesMarkdupes' {
                containerOptions = "--rm --name BAM-POSTPROC"
                //"--rm --env \"MHF_HOST_UID=\$(id -u)\" --env \"MHF_HOST_GID=\$(id -g)\" --name BAM-POSTPROC"
            }
            withLabel: 'aggregateCustomPons' {
                containerOptions = "--rm --name AGGREGATE-PONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name AGGREGATE-PONS"
            }
            withLabel: 'collateCustomPons' {
                containerOptions = "--rm --name COLLATE-FUSION-PONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name COLLATE-FUSION-PONS"
            }
            withLabel: 'collateFusions' {
                containerOptions = "--rm --name COLLATE-FUSIONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name COLLATE-FUSIONS"
            }
            withLabel: 'collateHLAFiles' {
                containerOptions = "--rm --name COLLATE-HLA-FILES"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name COLLATE-HLA-FILES"
            }
            withLabel: 'filterReads' {
                containerOptions = "--rm --name ALIGNED-READS-FILTERING"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name ALIGNED-READS-FILTERING"
            }
            withLabel: 'filterFusions' {
                containerOptions = "--rm --name FILTER-FUSIONS -v ${params.metaDataDir}:/tmp/metadata"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name FILTER-FUSIONS"
            }
            withLabel: 'filterHLAByFreq' {
                containerOptions = "--rm --name FILTER_HLAS_BY_FREQ"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name FILTER_HLAS_BY_FREQ"
            }
            withLabel: 'getRecurrentFusions' {
                containerOptions = "--rm --name FILTER-FOR-RECURRENT"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name FILTER-FOR-RECURRENT"
            }
            withLabel: 'concatNormFilteredFusions' {
                containerOptions = "--rm --name CONCAT_FUSIONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name CONCAT_FUSIONS"
            }
            withLabel: 'getCohortRecurrentFusions' {
                containerOptions = "--rm --name IDENTIFY_RECURRENT_FUSIONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name IDENTIFY_RECURRENT_FUSIONS" 
            }
            withLabel: 'keepValidatedFusions' {
                containerOptions = "--rm --name KEEP-VALIDATED-FUSIONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name KEEP-VALIDATED-FUSIONS"
            }
            withLabel: 'typeHLAs' {
                containerOptions = "--rm --name TYPE-HLAS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name TYPE-HLAS"
            }
            withLabel: 'reformatHLAs' {
                containerOptions = "--rm --name REFORMAT-HLAS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name REFORMAT-HLAS"
            }
            withLabel: 'callFusionsAR' {
                containerOptions = "--rm --name FT-CALLING-ARRIBA -v ${params.arribaDB}:/tmp/arriba-db -v ${params.starIndex}:/tmp/starIdx"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name FT-CALLING-ARRIBA -v ${params.arribaDB}:/tmp/arriba-db -v ${params.starIndex}:/tmp/starIdx"
            }
            withLabel: 'callFusionsFC' {
                containerOptions = "--rm --name FT-CALLING-FUSIONCATCHER -v ${params.fuscatDB}:/tmp/fuscat-db"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\""
            }
            withLabel: 'callFusionsSF' {
                containerOptions = "--rm --name FT-CALLING-STARFUSION -v ${params.ctatDB}:/tmp/ctat-db"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name FT-CALLING-STARFUSION"
            }
            withLabel: 'translateInSilico' {
                containerOptions = "--rm --name TRANSLATE-IN-SILICO"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name TRANSLATE-IN-SILICO"
            }
            withLabel: 'validateInSilico' {
                containerOptions = "--rm --name FUSION-INSPECTOR-VALIDATION -v ${params.ctatDB}:/tmp/ctat-db"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name FUSION_INSPECTOR_VALIDATION -v ${params.ctatDB}:/home/refs/ctat-db"
            }
            withLabel: 'collectCohortValidatedFusions' {
                containerOptions = "--rm --name COLLECT-COHORTWIDE-VALIDATED-FUSIONS"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name COLLECT_COHORTWIDE_VALIDATED_FUSIONS -v ${params.metaDataDir}:/tmp/metadata"
            }
            withLabel: 'predictCohortNeopeptides' {
                containerOptions = "--rm --name PREDICT-NEOPEPTIDES-COHORT-LEVEL -v ${params.metaDataDir}:/tmp/metadata"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name PREDICT_NEOPEPTIDES_COHORT_LEVEL -v ${params.metaDataDir}:/tmp/metadata"
            }
            withLabel: 'predictSampleNeopeptides' {
                containerOptions = "--rm --name PREDICT-NEOPEPTIDES-SAMPLE-LEVEL -v ${params.metaDataDir}:/tmp/metadata"
                //"--rm -e \"MHF_HOST_UID=\$(id -u)\" -e \"MHF_HOST_GID=\$(id -g)\" --name PREDICT_NEOPEPTIDES_SAMPLE_LEVEL -v ${params.metaDataDir}:/tmp/metadata"
            }
        }
    }

    'awsbatch' {
        workDir = 's3://crmy-aws-batch-nf/' // PLEASE CHANGE THIS TO YOUR OWN BUCKET
        dag.overwrite = true
        report.overwrite = true
        timeline.overwrite = true

        aws.region = 'ap-southeast-5'
        aws.batch.cliPath = '/opt/conda/bin/aws' // Path to AWS CLI in all Docker containers

        params {
            starIndex = "${projectDir}/refs/star-db/GRCh38viral_ENSEMBL113/STAR_index_GRCh38viral_ENSEMBL113"
            arribaDB = "${projectDir}/refs/star-db/GRCh38viral_ENSEMBL113"  
            fuscatDB = "${projectDir}/refs/fuscat-db/hs_ensembl_v113"
            ctatDB = "${projectDir}/refs/ctat-db/ctat_genome_lib_build_dir"
        }

        process {
            executor = 'awsbatch'
            queue = 'aws-batch-nextflow-spot-Q'
            
            // preprocessing and alignment
            withLabel: 'trimReads' {
                container = "job-definition://trim-reads-preproc-nf"
                containerOptions = "--rm --name TRIM-READS"
            }
            withLabel: 'alignReads2Pass' {
                container = "job-definition://align-reads-twopass-nf"
                containerOptions = "--rm --name ALIGNMENT-2P"
            }
            withLabel: 'alignReadsGeneral' {
                container = "job-definition://align-reads-star-general-nf"
                containerOptions = "--rm --name ALIGNMENT-STARGENERAL -v ${params.starIndex}:/tmp/starIdx"
            }
            withLabel: 'alignReadsArriba' {
                container = "job-definition://align-reads-star-arriba-nf"
                containerOptions = "--rm --name ALIGNMENT-ARRIBA -v ${params.starIndex}:/tmp/starIdx"
            }
            withLabel: 'fixmatesMarkdupes' {
                container = "job-definition://fix-mates-mark-dupes-nf"
                containerOptions = "--rm --name BAM-POSTPROC"
            }

            // type HLAs
            withLabel: 'typeHLAs' {
                container = "job-definition://type-hlas-nf" 
                containerOptions = "--rm --name TYPE-HLAS"
            }
            withLabel: 'reformatHLAs' {
                container = "job-definition://reformat-hlas-nf"
                containerOptions = "--rm --name REFORMAT-HLAS"
            }
            withLabel: 'collateHLAFiles' {
                container = "job-definition://collate-hlas-nf"
                containerOptions = "--rm --name COLLATE-HLA-FILES"
            }
            withLabel: 'filterHLAByFreq' {
                container = "job-definition://filter-hlas-by-freq-nf"
                containerOptions = "--rm --name FILTER_HLAS_BY_FREQ"
            }

            // fusion call preprocessing
            withLabel: 'filterReads' {
                container = "job-definition://filter-aligned-reads-nf"
                containerOptions = "--rm --name ALIGNED-READS-FILTERING"
            }
            withLabel: 'convertFilteredReads' {
                container = "job-definition://convert-filtered-reads-nf"
                containerOptions = "--rm --name FILTERED-BAM-2-FASTQ"
            }
            
            
            withLabel: 'callFusionsAR' {
                container = "job-definition://call-fusion-arriba-nf"
                containerOptions = "--rm --name FT-CALLING-ARRIBA -v ${params.arribaDB}:/tmp/arriba-db -v ${params.starIndex}:/tmp/starIdx"
            }
            withLabel: 'callFusionsFC' {
                container = "job-definition://call-fusion-fusioncatcher-nf"
                containerOptions = "--rm --name FT-CALLING-FUSIONCATCHER -v ${params.fuscatDB}:/tmp/fuscat-db"
            }
            withLabel: 'callFusionsSF' {
                container = "job-definition://call-fusion-starfusion-nf"
                containerOptions = "--rm --name FT-CALLING-STARFUSION -v ${params.ctatDB}:/tmp/ctat-db"
            }
            withLabel: 'collateFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name COLLATE-FUSIONS"
            }
            withLabel: 'filterFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name FILTER-FUSIONS -v ${projectDir}/metadata:/tmp/metadata"
            }
            withLabel: 'concatNormFilteredFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name CONCAT_FUSIONS"
            }
            withLabel: 'translateInSilico' {
                container = "job-definition://translate-in-silico-nf"
                containerOptions = "--rm --name TRANSLATE-IN-SILICO"
            }
            withLabel: 'validateInSilico' {
                container = "job-definition://validate-in-silico-fusions-nf"
                containerOptions = "--rm --name FUSION-INSPECTOR-VALIDATION -v ${params.ctatDB}:/tmp/ctat-db"
            }
            withLabel: 'keepValidatedFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name KEEP-VALIDATED-FUSIONS"
            }
            withLabel: 'collectCohortValidatedFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name COLLECT-COHORTWIDE-VALIDATED-FUSIONS"
            }

            // recurrence fusion analysis
            withLabel: 'getRecurrentFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name FILTER-FOR-RECURRENT"
            }
            withLabel: 'getCohortRecurrentFusions' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name IDENTIFY_RECURRENT_FUSIONS"
            }

            // neopeptide prediction
            withLabel: 'predictCohortNeopeptides' {
                container = "job-definition://predict-neopeptides-nf"
                containerOptions = "--rm --name PREDICT-NEOPEPTIDES-COHORT-LEVEL -v ${params.metaDataDir}:/tmp/metadata"
            }
            withLabel: 'predictSampleNeopeptides' {
                container = "job-definition://predict-neopeptides-nf"
                containerOptions = "--rm --name PREDICT-NEOPEPTIDES-SAMPLE-LEVEL -v ${params.metaDataDir}:/tmp/metadata"
            }

            // custom PoN processing
            withLabel: 'aggregateCustomPons' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name AGGREGATE-PONS"
            }
            withLabel: 'collateCustomPons' {
                container = "job-definition://general-postprocessing-fusions-nf"
                containerOptions = "--rm --name COLLATE-FUSION-PONS"
            }
        }     
    }

    // ========== MODE PROFILES ==========
    
    'personalizedNeo' {
        params {
            sampleLevelHLANeoPred = true
            cohortLevelHLANeoPred = false
            recurrentFusionsOnly = false
        }
    }

    'sharedNeo' {
        params {
            sampleLevelHLANeoPred = false
            cohortLevelHLANeoPred = true
            recurrentFusionsOnly = true
        }
    }
}

